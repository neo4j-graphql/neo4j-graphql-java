"An enum for sorting in either ascending or descending order."
enum SortDirection {
  "Sort by field values in ascending order."
  ASC
  "Sort by field values in descending order."
  DESC
}

"Information about the number of nodes and relationships created and deleted during an update mutation"
type UpdateInfo {
  bookmark: String @deprecated(reason : "This field has been deprecated because bookmarks are now handled by the driver.")
  nodesCreated: Int!
  nodesDeleted: Int!
  relationshipsCreated: Int!
  relationshipsDeleted: Int!
}

"Information about the number of nodes and relationships created during a create mutation"
type CreateInfo {
  bookmark: String @deprecated(reason : "This field has been deprecated because bookmarks are now handled by the driver.")
  nodesCreated: Int!
  relationshipsCreated: Int!
}

"""
Information about the number of nodes and relationships deleted during a delete mutation
"""
type DeleteInfo {
  bookmark: String @deprecated(reason : "This field has been deprecated because bookmarks are now handled by the driver.")
  nodesDeleted: Int!
  relationshipsDeleted: Int!
}

#Pagination information (Relay)
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type IDAggregateSelectionNullable {
  shortest: ID
  longest: ID
}

type IDAggregateSelectionNonNullable {
  shortest: ID!
  longest: ID!
}

type StringAggregateSelectionNullable {
  shortest: String
  longest: String
}

type StringAggregateSelectionNonNullable {
  shortest: String!
  longest: String!
}

type FloatAggregateSelectionNullable {
  average: Float
  max: Float
  min: Float
  sum: Float
}

type FloatAggregateSelectionNonNullable {
  average: Float!
  max: Float!
  min: Float!
  sum: Float!
}

type IntAggregateSelectionNullable {
  average: Float
  max: Int
  min: Int
  sum: Int
}

type IntAggregateSelectionNonNullable {
  average: Float!
  max: Int!
  min: Int!
  sum: Int!
}

type BigIntAggregateSelectionNullable {
  average: BigInt
  max: BigInt
  min: BigInt
  sum: BigInt
}

type BigIntAggregateSelectionNonNullable {
  average: BigInt!
  max: BigInt!
  min: BigInt!
  sum: BigInt!
}

type DateTimeAggregateSelectionNullable {
  max: DateTime
  min: DateTime
}

type DateTimeAggregateSelectionNonNullable {
  max: DateTime!
  min: DateTime!
}

type LocalDateTimeAggregateSelectionNullable {
  max: LocalDateTime
  min: LocalDateTime
}

type LocalDateTimeAggregateSelectionNonNullable {
  max: LocalDateTime!
  min: LocalDateTime!
}

type LocalTimeAggregateSelectionNullable {
  max: LocalTime
  min: LocalTime
}

type LocalTimeAggregateSelectionNonNullable {
  max: LocalTime!
  min: LocalTime!
}

type TimeAggregateSelectionNullable {
  max: Time
  min: Time
}

type TimeAggregateSelectionNonNullable {
  max: Time!
  min: Time!
}

type DurationAggregateSelectionNullable {
  max: Duration
  min: Duration
}

type DurationAggregateSelectionNonNullable {
  max: Duration!
  min: Duration!
}

type Point {
  """
  The first element of the Coordinate for geographic CRS, degrees East of the prime meridian
  Range -180.0 to 180.0
  """
  longitude: Float!

  """
  The second element of the Coordinate for geographic CRS, degrees North of the equator
  Range -90.0 to 90.0
  """
  latitude: Float!

  "The third element of the Coordinate for geographic CRS, meters above the ellipsoid defined by the datum (WGS-84)"
  height: Float

  """
  The coordinate reference systems (CRS)
  -------------------------------------
  posible values:
  * `wgs-84`: A 2D geographic point in the WGS 84 CRS is specified by: longitude and latitude
  * `wgs-84-3d`: A 3D geographic point in the WGS 84 CRS is specified by longitude, latitude and height
  """
  crs: String!

  """
  The internal Neo4j ID for the CRS
  One of:
  * `4326`: represents CRS `wgs-84`
  * `4979`: represents CRS `wgs-84-3d`
  """
  srid: Int!
}

input PointInput {
  """
  The first element of the Coordinate for geographic CRS, degrees East of the prime meridian
  Range -180.0 to 180.0
  """
  longitude: Float!

  """
  The second element of the Coordinate for geographic CRS, degrees North of the equator
  Range -90.0 to 90.0
  """
  latitude: Float!

  "The third element of the Coordinate for geographic CRS, meters above the ellipsoid defined by the datum (WGS-84)"
  height: Float
}

input PointDistance {
  point: PointInput!
  "The distance in metres to be used when comparing two points"
  distance: Float!
}

type CartesianPoint {
  "The first element of the Coordinate"
  x: Float!

  "The second element of the Coordinate"
  y: Float!

  "The third element of the Coordinate"
  z: Float

  """
  The coordinate reference systems (CRS)
  -------------------------------------
  possible values:
  * `cartesian`: A 2D point in the Cartesian CRS is specified with a map containing x and y coordinate values
  * `cartesian-3d`: A 3D point in the Cartesian CRS is specified with a map containing x, y and z coordinate values
  """
  crs: String!

  """
  The internal Neo4j ID for the CRS
  One of:
  * `7203`: represents CRS `cartesian`
  * `9157`: represents CRS `cartesian-3d`
  """
  srid: Int!
}

input CartesianPointInput{
  "The first element of the Coordinate"
  x: Float!

  "The second element of the Coordinate"
  y: Float!

  "The third element of the Coordinate"
  z: Float
}

input CartesianPointDistance {
  point: CartesianPointInput!
  distance: Float!
}

"Input type for options that can be specified on a query operation."
input QueryOptions {
  limit: Int
  offset: Int
}

"The input for filtering a float"
input FloatWhere {
  max: Float
  min: Float
}

"A date, represented as a 'yyyy-mm-dd' string"
scalar Date

"A time, represented as an RFC3339 time string"
scalar Time

"A local time, represented as a time string without timezone information"
scalar LocalTime

"A date and time, represented as an ISO-8601 string"
scalar DateTime

"A local datetime, represented as 'YYYY-MM-DDTHH:MM:SS'"
scalar LocalDateTime

"A BigInt value up to 64 bits in size, which can be a number or a string if used inline, or a string only if used as a variable. Always returned as a string."
scalar BigInt

"A duration, represented as an ISO 8601 duration string"
scalar Duration

enum EventType {
  CREATE
  UPDATE
  DELETE
  CREATE_RELATIONSHIP
  DELETE_RELATIONSHIP
}
# TODO create feature request
#scalar DynamicProperties

"An object with an ID"
interface Node {
  "The id of the object."
  id: ID!
}
