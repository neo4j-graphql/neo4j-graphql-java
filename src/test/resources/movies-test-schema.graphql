type Movie {
    _id: String
    movieId: ID!
    title: String
    year: Int
    released: Int # was DateTime
    plot: String
    poster: String
    imdbRating: Float
    genres: [Genre] @relation(name: "IN_GENRE", direction: OUT)
    similar(first: Int = 3, offset: Int = 0): [Movie] @cypher(statement: "MATCH (this)--(:Genre)--(o:Movie) RETURN o")
    mostSimilar: Movie @cypher(statement: "RETURN this")
    degree: Int @cypher(statement: "RETURN SIZE((this)--())")
    actors(first: Int = 3, offset: Int = 0, name: String): [Actor] @relation(name: "ACTED_IN", direction:IN)
    avgStars: Float
    filmedIn: State @relation(name: "FILMED_IN", direction: OUT)
    scaleRating(scale: Int = 3): Float @cypher(statement: "RETURN $scale * this.imdbRating")
    scaleRatingFloat(scale: Float = 1.5): Float @cypher(statement: "RETURN $scale * this.imdbRating")
    actorMovies: [Movie] @cypher(statement: """
    MATCH (this)-[:ACTED_IN*2]-(other:Movie)
    RETURN other
    """)
    publishedBy: Publisher @relation(name: "PUBLISHED_BY", direction: OUT)
    ratings: [Rated]
}
type Publisher {
    name: ID!
}
type Genre {
    _id: String!
    name: ID!
    movies(first: Int = 3, offset: Int = 0): [Movie] @relation(name: "IN_GENRE", direction: IN)
    highestRatedMovie: Movie @cypher(statement: "MATCH (m:Movie)-[:IN_GENRE]->(this) RETURN m ORDER BY m.imdbRating DESC LIMIT 1")
}
type State {
    name: String
}
# interface Person {
#  userId: ID!
#  name: String
#}
type Actor # implements Person
{
    userId: ID!
    name: String
    movies: [Movie] @relation(name: "ACTED_IN", direction:OUT)
  born: _Neo4jDateTime
}
type User # implements Person
{
    userId: ID!
    name: String
    rated(rating: Int): [Rated]
    friends(since: Int): [FriendOf]
    knows: [User] @relation(name: "KNOWS", direction:OUT)
  born: _Neo4jDateTime
}
type FriendOf {
    from: User
    since: Int
    to: User
}
type Rated @relation(name:"RATED") {
    from: User
    rating: Int
    to: Movie
}
enum BookGenre {
    Mystery,
    Science,
    Math
}
type Book {
    genre: BookGenre
}
# enum _MovieOrdering {
#   title_desc,
#   title_asc
# }
# enum _GenreOrdering {
#   name_desc,
#   name_asc
# }
type Query {
    Movie(_id: String, movieId: ID, title: String, year: Int, plot: String, poster: String, imdbRating: Float, first: Int, offset: Int, orderBy: _MovieOrdering): [Movie]
    MoviesByYear(year: Int): [Movie]
    MovieById(movieId: ID!): Movie
    MovieBy_Id(_id: String!): Movie
    GenresBySubstring(substring: String): [Genre] @cypher(statement: "MATCH (g:Genre) WHERE toLower(g.name) CONTAINS toLower($substring) RETURN g")
    Books: [Book]
  User: [User]
}
type Mutation {
    createGenre(name:String): Genre @cypher(statement:"CREATE (g:Genre) SET g.name = name RETURN g")
}
# scalar DateTime
